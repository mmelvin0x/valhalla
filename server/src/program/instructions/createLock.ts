/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from "@metaplex-foundation/umi";
import { Serializer, struct, u64 } from "@metaplex-foundation/umi/serializers";
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from "../shared";

// Accounts.
export type CreateLockInstructionAccounts = {
  user: Signer;
  locker: PublicKey | Pda;
  treasury: PublicKey | Pda;
  lock: PublicKey | Pda;
  lockTokenAccount: PublicKey | Pda;
  userTokenAccount: PublicKey | Pda;
  mint: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateLockInstructionData = {
  unlockDate: bigint;
  depositAmount: bigint;
};

export type CreateLockInstructionDataArgs = {
  unlockDate: number | bigint;
  depositAmount: number | bigint;
};

export function getCreateLockInstructionDataSerializer(): Serializer<
  CreateLockInstructionDataArgs,
  CreateLockInstructionData
> {
  return struct<CreateLockInstructionData>(
    [
      ["unlockDate", u64()],
      ["depositAmount", u64()],
    ],
    { description: "CreateLockInstructionData" }
  ) as Serializer<CreateLockInstructionDataArgs, CreateLockInstructionData>;
}

// Args.
export type CreateLockInstructionArgs = CreateLockInstructionDataArgs;

// Instruction.
export function createLock(
  context: Pick<Context, "programs">,
  input: CreateLockInstructionAccounts & CreateLockInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "valhalla",
    "D93S1f9iaTDXaLXXeyFVLcXX7wJiCBbk2Jqe1SmbWk2k"
  );

  // Accounts.
  const resolvedAccounts = {
    user: {
      index: 0,
      isWritable: true as boolean,
      value: input.user ?? null,
    },
    locker: {
      index: 1,
      isWritable: false as boolean,
      value: input.locker ?? null,
    },
    treasury: {
      index: 2,
      isWritable: true as boolean,
      value: input.treasury ?? null,
    },
    lock: {
      index: 3,
      isWritable: true as boolean,
      value: input.lock ?? null,
    },
    lockTokenAccount: {
      index: 4,
      isWritable: true as boolean,
      value: input.lockTokenAccount ?? null,
    },
    userTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.userTokenAccount ?? null,
    },
    mint: {
      index: 6,
      isWritable: false as boolean,
      value: input.mint ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } as ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateLockInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      "splToken",
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      "splSystem",
      "11111111111111111111111111111111"
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    "programId",
    programId
  );

  // Data.
  const data = getCreateLockInstructionDataSerializer().serialize(
    resolvedArgs as CreateLockInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    {
      instruction: { keys, programId, data },
      signers,
      bytesCreatedOnChain,
    },
  ]);
}
