/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from "@metaplex-foundation/umi";
import { Serializer, struct, u64 } from "@metaplex-foundation/umi/serializers";
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from "../shared";

// Accounts.
export type UpdateLockerFeeInstructionAccounts = {
  admin: Signer;
  locker: PublicKey | Pda;
  treasury: PublicKey | Pda;
};

// Data.
export type UpdateLockerFeeInstructionData = { fee: bigint };

export type UpdateLockerFeeInstructionDataArgs = { fee: number | bigint };

export function getUpdateLockerFeeInstructionDataSerializer(): Serializer<
  UpdateLockerFeeInstructionDataArgs,
  UpdateLockerFeeInstructionData
> {
  return struct<UpdateLockerFeeInstructionData>([["fee", u64()]], {
    description: "UpdateLockerFeeInstructionData",
  }) as Serializer<
    UpdateLockerFeeInstructionDataArgs,
    UpdateLockerFeeInstructionData
  >;
}

// Args.
export type UpdateLockerFeeInstructionArgs = UpdateLockerFeeInstructionDataArgs;

// Instruction.
export function updateLockerFee(
  context: Pick<Context, "programs">,
  input: UpdateLockerFeeInstructionAccounts & UpdateLockerFeeInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    "valhalla",
    "D93S1f9iaTDXaLXXeyFVLcXX7wJiCBbk2Jqe1SmbWk2k"
  );

  // Accounts.
  const resolvedAccounts = {
    admin: {
      index: 0,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    locker: {
      index: 1,
      isWritable: true as boolean,
      value: input.locker ?? null,
    },
    treasury: {
      index: 2,
      isWritable: true as boolean,
      value: input.treasury ?? null,
    },
  } as ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateLockerFeeInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    "programId",
    programId
  );

  // Data.
  const data = getUpdateLockerFeeInstructionDataSerializer().serialize(
    resolvedArgs as UpdateLockerFeeInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    {
      instruction: { keys, programId, data },
      signers,
      bytesCreatedOnChain,
    },
  ]);
}
