/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from "@metaplex-foundation/umi";
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from "@metaplex-foundation/umi/serializers";

export type Lock = Account<LockAccountData>;

export type LockAccountData = {
  user: PublicKey;
  mint: PublicKey;
  lockTokenAccount: PublicKey;
  userTokenAccount: PublicKey;
  lockedDate: bigint;
  unlockDate: bigint;
};

export type LockAccountDataArgs = {
  user: PublicKey;
  mint: PublicKey;
  lockTokenAccount: PublicKey;
  userTokenAccount: PublicKey;
  lockedDate: number | bigint;
  unlockDate: number | bigint;
};

export function getLockAccountDataSerializer(): Serializer<
  LockAccountDataArgs,
  LockAccountData
> {
  return struct<LockAccountData>(
    [
      ["user", publicKeySerializer()],
      ["mint", publicKeySerializer()],
      ["lockTokenAccount", publicKeySerializer()],
      ["userTokenAccount", publicKeySerializer()],
      ["lockedDate", u64()],
      ["unlockDate", u64()],
    ],
    { description: "LockAccountData" }
  ) as Serializer<LockAccountDataArgs, LockAccountData>;
}

export function deserializeLock(rawAccount: RpcAccount): Lock {
  return deserializeAccount(rawAccount, getLockAccountDataSerializer());
}

export async function fetchLock(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Lock> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, "Lock");
  return deserializeLock(maybeAccount);
}

export async function safeFetchLock(
  context: Pick<Context, "rpc">,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Lock | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeLock(maybeAccount) : null;
}

export async function fetchAllLock(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Lock[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, "Lock");
    return deserializeLock(maybeAccount);
  });
}

export async function safeFetchAllLock(
  context: Pick<Context, "rpc">,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Lock[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeLock(maybeAccount as RpcAccount));
}

export function getLockGpaBuilder(context: Pick<Context, "rpc" | "programs">) {
  const programId = context.programs.getPublicKey(
    "valhalla",
    "D93S1f9iaTDXaLXXeyFVLcXX7wJiCBbk2Jqe1SmbWk2k"
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      user: PublicKey;
      mint: PublicKey;
      lockTokenAccount: PublicKey;
      userTokenAccount: PublicKey;
      lockedDate: number | bigint;
      unlockDate: number | bigint;
    }>({
      user: [0, publicKeySerializer()],
      mint: [32, publicKeySerializer()],
      lockTokenAccount: [64, publicKeySerializer()],
      userTokenAccount: [96, publicKeySerializer()],
      lockedDate: [128, u64()],
      unlockDate: [136, u64()],
    })
    .deserializeUsing<Lock>((account) => deserializeLock(account));
}

export function getLockSize(): number {
  return 144;
}
