/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * Locked: 'The vault is locked!'
 *
 * @category Errors
 * @category generated
 */
export class LockedError extends Error {
  readonly code: number = 0x1770;
  override readonly name: string = "Locked";
  constructor() {
    super("The vault is locked!");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, LockedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new LockedError());
createErrorFromNameLookup.set("Locked", () => new LockedError());

/**
 * Unauthorized: 'Not authorized to perform this action!'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1771;
  override readonly name: string = "Unauthorized";
  constructor() {
    super("Not authorized to perform this action!");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, UnauthorizedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UnauthorizedError());
createErrorFromNameLookup.set("Unauthorized", () => new UnauthorizedError());

/**
 * NoPayout: 'No payout!'
 *
 * @category Errors
 * @category generated
 */
export class NoPayoutError extends Error {
  readonly code: number = 0x1772;
  override readonly name: string = "NoPayout";
  constructor() {
    super("No payout!");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, NoPayoutError);
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new NoPayoutError());
createErrorFromNameLookup.set("NoPayout", () => new NoPayoutError());

/**
 * AlreadyInitialized: 'Config account is already initialized!'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyInitializedError extends Error {
  readonly code: number = 0x1773;
  override readonly name: string = "AlreadyInitialized";
  constructor() {
    super("Config account is already initialized!");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, AlreadyInitializedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new AlreadyInitializedError());
createErrorFromNameLookup.set(
  "AlreadyInitialized",
  () => new AlreadyInitializedError()
);

/**
 * CloseVaultFailed: 'Closing the vault failed!'
 *
 * @category Errors
 * @category generated
 */
export class CloseVaultFailedError extends Error {
  readonly code: number = 0x1774;
  override readonly name: string = "CloseVaultFailed";
  constructor() {
    super("Closing the vault failed!");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, CloseVaultFailedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new CloseVaultFailedError());
createErrorFromNameLookup.set(
  "CloseVaultFailed",
  () => new CloseVaultFailedError()
);

/**
 * InvalidTokenFeeBasisPoints: 'Token fee basis points are invalid!'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenFeeBasisPointsError extends Error {
  readonly code: number = 0x1775;
  override readonly name: string = "InvalidTokenFeeBasisPoints";
  constructor() {
    super("Token fee basis points are invalid!");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidTokenFeeBasisPointsError);
    }
  }
}

createErrorFromCodeLookup.set(
  0x1775,
  () => new InvalidTokenFeeBasisPointsError()
);
createErrorFromNameLookup.set(
  "InvalidTokenFeeBasisPoints",
  () => new InvalidTokenFeeBasisPointsError()
);

/**
 * InvalidSolFee: 'SOL fee is invalid!'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSolFeeError extends Error {
  readonly code: number = 0x1776;
  override readonly name: string = "InvalidSolFee";
  constructor() {
    super("SOL fee is invalid!");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, InvalidSolFeeError);
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidSolFeeError());
createErrorFromNameLookup.set("InvalidSolFee", () => new InvalidSolFeeError());

/**
 * FeePaymentFailed: 'Fee payment failed!'
 *
 * @category Errors
 * @category generated
 */
export class FeePaymentFailedError extends Error {
  readonly code: number = 0x1777;
  override readonly name: string = "FeePaymentFailed";
  constructor() {
    super("Fee payment failed!");
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, FeePaymentFailedError);
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new FeePaymentFailedError());
createErrorFromNameLookup.set(
  "FeePaymentFailed",
  () => new FeePaymentFailedError()
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code);
  return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name);
  return createError != null ? createError() : null;
}
