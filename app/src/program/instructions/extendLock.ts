/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ExtendLock
 * @category generated
 */
export type ExtendLockInstructionArgs = {
  duration: beet.bignum
}
/**
 * @category Instructions
 * @category ExtendLock
 * @category generated
 */
export const extendLockStruct = new beet.BeetArgsStruct<
  ExtendLockInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['duration', beet.u64],
  ],
  'ExtendLockInstructionArgs'
)
/**
 * Accounts required by the _extendLock_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] lock
 * @property [] mint
 * @category Instructions
 * @category ExtendLock
 * @category generated
 */
export type ExtendLockInstructionAccounts = {
  user: web3.PublicKey
  lock: web3.PublicKey
  mint: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const extendLockInstructionDiscriminator = [
  68, 151, 140, 144, 139, 122, 118, 170,
]

/**
 * Creates a _ExtendLock_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ExtendLock
 * @category generated
 */
export function createExtendLockInstruction(
  accounts: ExtendLockInstructionAccounts,
  args: ExtendLockInstructionArgs,
  programId = new web3.PublicKey('VHDaKPFJHN3c4Vcb1441HotazGQFa4kGoMik9HMRVQh')
) {
  const [data] = extendLockStruct.serialize({
    instructionDiscriminator: extendLockInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.lock,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
