/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AdminInitialize
 * @category generated
 */
export type AdminInitializeInstructionArgs = {
  fee: beet.bignum
}
/**
 * @category Instructions
 * @category AdminInitialize
 * @category generated
 */
export const adminInitializeStruct = new beet.BeetArgsStruct<
  AdminInitializeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['fee', beet.u64],
  ],
  'AdminInitializeInstructionArgs'
)
/**
 * Accounts required by the _adminInitialize_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] locker
 * @property [] treasury
 * @category Instructions
 * @category AdminInitialize
 * @category generated
 */
export type AdminInitializeInstructionAccounts = {
  admin: web3.PublicKey
  locker: web3.PublicKey
  treasury: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const adminInitializeInstructionDiscriminator = [
  231, 170, 149, 43, 131, 117, 86, 5,
]

/**
 * Creates a _AdminInitialize_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AdminInitialize
 * @category generated
 */
export function createAdminInitializeInstruction(
  accounts: AdminInitializeInstructionAccounts,
  args: AdminInitializeInstructionArgs,
  programId = new web3.PublicKey('Faccsj4TmRdXeNsmP9X1MA4kqRjsD2MYL67Zc7NYgMoU')
) {
  const [data] = adminInitializeStruct.serialize({
    instructionDiscriminator: adminInitializeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.locker,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
