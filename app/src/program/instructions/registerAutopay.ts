/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RegisterAutopay
 * @category generated
 */
export const registerAutopayStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'RegisterAutopayInstructionArgs'
)
/**
 * Accounts required by the _registerAutopay_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [] creator
 * @property [] config
 * @property [_writable_] vault
 * @property [] mint
 * @category Instructions
 * @category RegisterAutopay
 * @category generated
 */
export type RegisterAutopayInstructionAccounts = {
  admin: web3.PublicKey
  creator: web3.PublicKey
  config: web3.PublicKey
  vault: web3.PublicKey
  mint: web3.PublicKey
}

export const registerAutopayInstructionDiscriminator = [
  109, 133, 48, 20, 209, 197, 46, 209,
]

/**
 * Creates a _RegisterAutopay_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RegisterAutopay
 * @category generated
 */
export function createRegisterAutopayInstruction(
  accounts: RegisterAutopayInstructionAccounts,
  programId = new web3.PublicKey('57Q3oV1buV8fLdvStfg5wsgGotgWc9k6doJd4QJzDVmU')
) {
  const [data] = registerAutopayStruct.serialize({
    instructionDiscriminator: registerAutopayInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.creator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.config,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
