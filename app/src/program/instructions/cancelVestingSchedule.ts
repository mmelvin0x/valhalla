/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category CancelVestingSchedule
 * @category generated
 */
export const cancelVestingScheduleStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)]],
  "CancelVestingScheduleInstructionArgs",
);
/**
 * Accounts required by the _cancelVestingSchedule_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] creator
 * @property [_writable_] recipient
 * @property [_writable_] vestingSchedule
 * @property [_writable_] vestingScheduleTokenAccount
 * @property [_writable_] creatorTokenAccount
 * @property [] mint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category CancelVestingSchedule
 * @category generated
 */
export type CancelVestingScheduleInstructionAccounts = {
  signer: web3.PublicKey;
  creator: web3.PublicKey;
  recipient: web3.PublicKey;
  vestingSchedule: web3.PublicKey;
  vestingScheduleTokenAccount: web3.PublicKey;
  creatorTokenAccount: web3.PublicKey;
  mint: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const cancelVestingScheduleInstructionDiscriminator = [
  236, 89, 41, 252, 91, 26, 88, 3,
];

/**
 * Creates a _CancelVestingSchedule_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CancelVestingSchedule
 * @category generated
 */
export function createCancelVestingScheduleInstruction(
  accounts: CancelVestingScheduleInstructionAccounts,
  programId = new web3.PublicKey(
    "CpeQRExCTr7a6pzjF7mGsT6HZVpAM636xSUFC4STTJFn",
  ),
) {
  const [data] = cancelVestingScheduleStruct.serialize({
    instructionDiscriminator: cancelVestingScheduleInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.recipient,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vestingSchedule,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vestingScheduleTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creatorTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
