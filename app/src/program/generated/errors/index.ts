/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * Locked: 'The lock has not expired yet'
 *
 * @category Errors
 * @category generated
 */
export class LockedError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'Locked'
  constructor() {
    super('The lock has not expired yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LockedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new LockedError())
createErrorFromNameLookup.set('Locked', () => new LockedError())

/**
 * Unauthorized: 'Not authorized to perform this action'
 *
 * @category Errors
 * @category generated
 */
export class UnauthorizedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'Unauthorized'
  constructor() {
    super('Not authorized to perform this action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnauthorizedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UnauthorizedError())
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError())

/**
 * InsufficientFundsForDeposit: 'You do not have enough tokens to perform this action'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientFundsForDepositError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InsufficientFundsForDeposit'
  constructor() {
    super('You do not have enough tokens to perform this action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientFundsForDepositError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new InsufficientFundsForDepositError()
)
createErrorFromNameLookup.set(
  'InsufficientFundsForDeposit',
  () => new InsufficientFundsForDepositError()
)

/**
 * NoPayout: 'No payout!'
 *
 * @category Errors
 * @category generated
 */
export class NoPayoutError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'NoPayout'
  constructor() {
    super('No payout!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoPayoutError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new NoPayoutError())
createErrorFromNameLookup.set('NoPayout', () => new NoPayoutError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
