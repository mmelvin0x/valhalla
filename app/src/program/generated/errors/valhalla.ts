/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** Locked: The lock has not expired yet */
export class LockedError extends ProgramError {
  override readonly name: string = 'Locked';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('The lock has not expired yet', program, cause);
  }
}
codeToErrorMap.set(0x1770, LockedError);
nameToErrorMap.set('Locked', LockedError);

/** Unauthorized: Not authorized to perform this action */
export class UnauthorizedError extends ProgramError {
  override readonly name: string = 'Unauthorized';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Not authorized to perform this action', program, cause);
  }
}
codeToErrorMap.set(0x1771, UnauthorizedError);
nameToErrorMap.set('Unauthorized', UnauthorizedError);

/** InsufficientFundsForDeposit: You do not have enough tokens to perform this action */
export class InsufficientFundsForDepositError extends ProgramError {
  override readonly name: string = 'InsufficientFundsForDeposit';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super(
      'You do not have enough tokens to perform this action',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1772, InsufficientFundsForDepositError);
nameToErrorMap.set(
  'InsufficientFundsForDeposit',
  InsufficientFundsForDepositError
);

/** NoPayout: No payout! */
export class NoPayoutError extends ProgramError {
  override readonly name: string = 'NoPayout';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('No payout!', program, cause);
  }
}
codeToErrorMap.set(0x1773, NoPayoutError);
nameToErrorMap.set('NoPayout', NoPayoutError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getValhallaErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getValhallaErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
