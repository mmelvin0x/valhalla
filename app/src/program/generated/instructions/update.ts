/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category Update
 * @category generated
 */
export const updateStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)]],
  "UpdateInstructionArgs"
);
/**
 * Accounts required by the _update_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] funder
 * @property [_writable_] recipient
 * @property [] newRecipient
 * @property [_writable_] lock
 * @property [] mint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category Update
 * @category generated
 */
export type UpdateInstructionAccounts = {
  signer: web3.PublicKey;
  funder: web3.PublicKey;
  recipient: web3.PublicKey;
  newRecipient: web3.PublicKey;
  lock: web3.PublicKey;
  mint: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const updateInstructionDiscriminator = [
  219, 200, 88, 176, 158, 63, 253, 127,
];

/**
 * Creates a _Update_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Update
 * @category generated
 */
export function createUpdateInstruction(
  accounts: UpdateInstructionAccounts,
  programId = new web3.PublicKey("5KUhgizPG5tiJpfzEpv1JubQsae6suZf5GKZyqDXqeoJ")
) {
  const [data] = updateStruct.serialize({
    instructionDiscriminator: updateInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.funder,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.recipient,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newRecipient,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lock,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
