/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { Serializer, struct, u64 } from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import { Authority, AuthorityArgs, getAuthoritySerializer } from '../types';

// Accounts.
export type CreateLockInstructionAccounts = {
  funder: Signer;
  /** The account of the beneficiary who will receive the locked tokens. */
  beneficiary: PublicKey | Pda;
  locker: PublicKey | Pda;
  /** The treasury where the fee will be sent too. */
  treasury: PublicKey | Pda;
  /** The lock PDA that will be created. */
  lock: PublicKey | Pda;
  /** The token account for the lock PDA */
  lockTokenAccount: PublicKey | Pda;
  /** The funder's token account. */
  funderTokenAccount: PublicKey | Pda;
  /** The beneficiary's token account. */
  beneficiaryTokenAccount: PublicKey | Pda;
  /** The mint account for the tokens. */
  mint: PublicKey | Pda;
  /** The program that provides the token-related functionality. */
  tokenProgram?: PublicKey | Pda;
  /** The program that provides the associated token functionality. */
  associatedTokenProgram: PublicKey | Pda;
  /** The system program. */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateLockInstructionData = {
  amountToBeVested: bigint;
  vestingDuration: bigint;
  payoutInterval: bigint;
  cliffPaymentAmount: bigint;
  startDate: bigint;
  cancelAuthority: Authority;
  changeRecipientAuthority: Authority;
};

export type CreateLockInstructionDataArgs = {
  amountToBeVested: number | bigint;
  vestingDuration: number | bigint;
  payoutInterval: number | bigint;
  cliffPaymentAmount: number | bigint;
  startDate: number | bigint;
  cancelAuthority: AuthorityArgs;
  changeRecipientAuthority: AuthorityArgs;
};

export function getCreateLockInstructionDataSerializer(): Serializer<
  CreateLockInstructionDataArgs,
  CreateLockInstructionData
> {
  return struct<CreateLockInstructionData>(
    [
      ['amountToBeVested', u64()],
      ['vestingDuration', u64()],
      ['payoutInterval', u64()],
      ['cliffPaymentAmount', u64()],
      ['startDate', u64()],
      ['cancelAuthority', getAuthoritySerializer()],
      ['changeRecipientAuthority', getAuthoritySerializer()],
    ],
    { description: 'CreateLockInstructionData' }
  ) as Serializer<CreateLockInstructionDataArgs, CreateLockInstructionData>;
}

// Args.
export type CreateLockInstructionArgs = CreateLockInstructionDataArgs;

// Instruction.
export function createLock(
  context: Pick<Context, 'programs'>,
  input: CreateLockInstructionAccounts & CreateLockInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'valhalla',
    'BgfvN8xjwoBD8YDvpDAFPZW6QxJeqrEZWvoXGg21PVzU'
  );

  // Accounts.
  const resolvedAccounts = {
    funder: {
      index: 0,
      isWritable: true as boolean,
      value: input.funder ?? null,
    },
    beneficiary: {
      index: 1,
      isWritable: false as boolean,
      value: input.beneficiary ?? null,
    },
    locker: {
      index: 2,
      isWritable: false as boolean,
      value: input.locker ?? null,
    },
    treasury: {
      index: 3,
      isWritable: true as boolean,
      value: input.treasury ?? null,
    },
    lock: { index: 4, isWritable: true as boolean, value: input.lock ?? null },
    lockTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.lockTokenAccount ?? null,
    },
    funderTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.funderTokenAccount ?? null,
    },
    beneficiaryTokenAccount: {
      index: 7,
      isWritable: true as boolean,
      value: input.beneficiaryTokenAccount ?? null,
    },
    mint: { index: 8, isWritable: false as boolean, value: input.mint ?? null },
    tokenProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateLockInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCreateLockInstructionDataSerializer().serialize(
    resolvedArgs as CreateLockInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
