/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AdminUpdate
 * @category generated
 */
export type AdminUpdateInstructionArgs = {
  newFee: beet.bignum
}
/**
 * @category Instructions
 * @category AdminUpdate
 * @category generated
 */
export const adminUpdateStruct = new beet.BeetArgsStruct<
  AdminUpdateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['newFee', beet.u64],
  ],
  'AdminUpdateInstructionArgs'
)
/**
 * Accounts required by the _adminUpdate_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [] newAdmin
 * @property [] newTreasury
 * @property [_writable_] locker
 * @property [] treasury
 * @category Instructions
 * @category AdminUpdate
 * @category generated
 */
export type AdminUpdateInstructionAccounts = {
  admin: web3.PublicKey
  newAdmin: web3.PublicKey
  newTreasury: web3.PublicKey
  locker: web3.PublicKey
  treasury: web3.PublicKey
}

export const adminUpdateInstructionDiscriminator = [
  123, 245, 240, 247, 4, 240, 221, 217,
]

/**
 * Creates a _AdminUpdate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AdminUpdate
 * @category generated
 */
export function createAdminUpdateInstruction(
  accounts: AdminUpdateInstructionAccounts,
  args: AdminUpdateInstructionArgs,
  programId = new web3.PublicKey('C572QduUUQuKezefbfFutKMgKA5uANzCu4LXXVHQbMEg')
) {
  const [data] = adminUpdateStruct.serialize({
    instructionDiscriminator: adminUpdateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.newAdmin,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.newTreasury,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.locker,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
