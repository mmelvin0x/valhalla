/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type Locker = Account<LockerAccountData>;

export type LockerAccountData = {
  admin: PublicKey;
  treasury: PublicKey;
  fee: bigint;
};

export type LockerAccountDataArgs = {
  admin: PublicKey;
  treasury: PublicKey;
  fee: number | bigint;
};

export function getLockerAccountDataSerializer(): Serializer<
  LockerAccountDataArgs,
  LockerAccountData
> {
  return struct<LockerAccountData>(
    [
      ['admin', publicKeySerializer()],
      ['treasury', publicKeySerializer()],
      ['fee', u64()],
    ],
    { description: 'LockerAccountData' }
  ) as Serializer<LockerAccountDataArgs, LockerAccountData>;
}

export function deserializeLocker(rawAccount: RpcAccount): Locker {
  return deserializeAccount(rawAccount, getLockerAccountDataSerializer());
}

export async function fetchLocker(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Locker> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Locker');
  return deserializeLocker(maybeAccount);
}

export async function safeFetchLocker(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Locker | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeLocker(maybeAccount) : null;
}

export async function fetchAllLocker(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Locker[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Locker');
    return deserializeLocker(maybeAccount);
  });
}

export async function safeFetchAllLocker(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Locker[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeLocker(maybeAccount as RpcAccount));
}

export function getLockerGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'valhalla',
    'BgfvN8xjwoBD8YDvpDAFPZW6QxJeqrEZWvoXGg21PVzU'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      admin: PublicKey;
      treasury: PublicKey;
      fee: number | bigint;
    }>({
      admin: [0, publicKeySerializer()],
      treasury: [32, publicKeySerializer()],
      fee: [64, u64()],
    })
    .deserializeUsing<Locker>((account) => deserializeLocker(account));
}

export function getLockerSize(): number {
  return 72;
}
